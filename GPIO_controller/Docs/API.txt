/*=========== IRQ ============*/
/* The interrupt controller domain is described in the kernel as an instance of struct irq_domain structure.
 * It manages mappings between hardware IRQ and Linux IRQ.
 * 
 * controller-local IRQ: hwirq
 * linux irq: software irq
 */
 
/* unsigned int irq_create_mapping(struct irq_domain *domain, irq_hw_number_t hwirq)
 * @domain : This is the domain to which this hardware interrupt belongs, or NULL for default domain
 * @Hwirq: This is the hardware IRQ number in that domain space 
 */
unsigned int irq_create_mapping(struct irq_domain *domain, irq_hw_number_t hwirq);
/*
 * If a mapping for the hwirq doesn't already exist, the function will allocate a new Linux
 * irq_desc structure, associate it with the hwirq, and call the irq_domain_ops.map()
 * .map(): This creates or updates a mapping between a virtual irq (virq) number
		and a hwirq number. This is called only once for a given mapping. It generally
		maps the virq with a given handler using irq_set_chip_and_handler*, so
		that, calling generic_handle_irq() or handle_nested_irq will trigger the right handler.
 */
 struct irq_domain_ops {
	 int (*map)(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw);
	void (*unmap)(struct irq_domain *d, unsigned int virq);
 };
/**
 * gpiochip_irq_map() - maps an IRQ into a GPIO irqchip
 * @d: the irqdomain used by this irqchip
 * @irq: the global irq number used by this GPIO irqchip irq
 * @hwirq: the local IRQ/GPIO line offset on this gpiochip
 *
 * This function will set up the mapping for a certain IRQ line on a
 * gpiochip by assigning the gpiochip as chip data, and using the irqchip
 * stored inside the gpiochip.
 */

/* When an interrupt is received, irq_find_mapping() function should be used to find the Linux IRQ number from the hwirq number.
 * A Linux IRQ number is always tied to a struct irq_desc structure, which is the structure by which Linux describes an IRQ
 
 * The irq_desc.action field is a list of irqaction structures, each of which records the
 * address of an interrupt handler for the associated interrupt source. Each call to the kernel's
 * request_irq() function (or the threaded version o) creates an add one struct
 * irqaction structure to the end of the list
 */
struct irq_desc {
	struct irq_data irq_data;
	irq_flow_handler_t handle_irq;
	struct irqaction *action; /* The irq_desc.action field is a list of irqaction structures */
	int parent_irq;
};

struct irqaction {
	irq_handler_t handler; /*  interrupt handler function */
	unsigned int irq; /*  Linux interrupt number */
};

struct irq_data {
	unsigned int irq; /* interrupt number (Linux IRQ) */
	unsigned long hwirq; /* hardware interrupt number, local to the irq_data.domain interrupt domain */
	struct irq_common_data *common;
	struct irq_chip *chip;
	struct irq_domain *domain;
	void *chip_data;
};
/*************************************************** GPIOCHIP_IRQCHIP_ADD() ***********************************************************************/
/*
 * @first_irq = irq_base = 0;
 */
ret = gpiochip_irqchip_add(&bank->chip, irqc, 0, handle_bad_irq, IRQ_TYPE_NONE);

/*Sets gpiochip.to_irq field to gpiochip_to_irq, which is an IRQ callback that just returns
 * irq_find_mapping(chip->irqdomain, offset);
 *
 */
static inline int gpiochip_irqchip_add(struct gpio_chip *gpiochip, struct irq_chip *irqchip,
					unsigned int first_irq, irq_flow_handler_t handler, unsigned int type)
{
	return gpiochip_irqchip_add_key(gpiochip, irqchip, first_irq, handler, type, false, NULL);
}
/*This function closely associates a certain irqchip with a certain gpiochip,
 * Providing an irq domain to translate the local IRQs to global irqs in the gpiolib core
 *
 */
int gpiochip_irqchip_add_key(struct gpio_chip *gpiochip, struct irq_chip *irqchip, unsigned int first_irq,
				irq_flow_handler_t handler, unsigned int type, bool nested, struct lock_class_key *lock_key)
{
	gpiochip->irqchip = irqchip;
	gpiochip->irq_handler = handler;
	gpiochip->to_irq = gpiochip_to_irq;
/** NOTE **/
	gpiochip->irqdomain = irq_domain_add_simple(of_node, gpiochip->ngpio, first_irq, &gpiochip_domain_ops, gpiochip);
}
/* Register an irq_domain and optionally map a range of irqs.
 * Allocates an irq_domain, and optionally if first_irq is positive then also allocate irq_descs and 
 * map all of the hwirqs to virqs starting at first_irq.
 * If device tree is used, then first_irq will be 0 and irqs get mapped dynamically on the fly.
 *
 * @size: total number of irqs in mapping
 * @first_irq: First number of irq block assigned to the domain. pass zero to assign irqs on-the-fly.
 * 			   If first_irq is non-zero, then pre-map all of the irqs in the domain to virqs starting at first_irq.
 * @ops: domain callbacks
 */
struct irq_domain *irq_domain_add_simple(struct device_node *of_node, unsigned int size,
								unsigned int first_irq, const struct irq_domain_ops *ops,  void *host_data)
{
	__irq_domain_add(of_node_to_fwnode(of_node), size, size, 0, ops, host_data);

	if (first_irq > 0) { /* false */
		irq_domain_associate_many(domain, first_irq, 0, size);
	}
}

/* __irq_domain_add() - Allocate a new irq_domain data structure
 * @hwirq_max: Maximum number of interrupts supported by controller
 * @ops: domain callbacks
 * Returns pointer to IRQ domain, or NULL on failure.
 */
struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, int size, irq_hw_number_t hwirq_max, 
									int direct_max, const struct irq_domain_ops *ops, void *host_data)
{
	domain->ops = ops
	domain->hwirq_max = hwirq_max;
	domain->revmap_size = size; /* 32 */
	domain->revmap_direct_max_irq = direct_max;

	list_add(&domain->link, &irq_domain_list);

	return domain;
}
{
/*======================================*/
void irq_domain_associate_many(struct irq_domain *domain, unsigned int irq_base, irq_hw_number_t hwirq_base, int count)
{
	for (i = 0; i < count; i++) {
		irq_domain_associate(domain, irq_base + i, hwirq_base + i);
	}
}
int irq_domain_associate(struct irq_domain *domain, unsigned int virq, irq_hw_number_t hwirq)
{
	domain->ops->map(domain, virq, hwirq);
}
static void irq_domain_set_mapping(struct irq_domain *domain, irq_hw_number_t hwirq, struct irq_data *irq_data)
{
	domain->linear_revmap[hwirq] = irq_data->irq;
}
/*======================================*/
}
/********************************************* GPIOCHIP_SET_CHAINED_IRQCHIP **************************************************/
gpiochip_set_chained_irqchip(&bank->chip, irqc, bank->irq, NULL);

/*
 * gpiochip_set_chained_irqchip() - connects a chained irqchip to a gpiochip
 * @gpiochip: the gpiochip to set the irqchip chain to
 * @irqchip: the irqchip to chain to the gpiochip
 * @parent_irq: the irq number corresponding to the parent IRQ for this chained irqchip
 * @parent_handler: the parent interrupt handler for the accumulated IRQ
 * 		coming out of the gpiochip. If the interrupt is nested rather than
 * 		cascaded, pass NULL in this handler argument.
 */
 void gpiochip_set_chained_irqchip(struct gpio_chip *gpiochip, struct irq_chip *irqchip,
				  unsigned int parent_irq, irq_flow_handler_t parent_handler)
{
	gpiochip_set_cascaded_irqchip(gpiochip, irqchip, parent_irq, parent_handler);
}
/**
 * gpiochip_set_cascaded_irqchip() - connects a cascaded irqchip to a gpiochip
 * @gpiochip: the gpiochip to set the irqchip chain to
 * @irqchip: the irqchip to chain to the gpiochip
 * @parent_irq: the irq number corresponding to the parent IRQ for this
 * chained irqchip
 */
static void gpiochip_set_cascaded_irqchip(struct gpio_chip *gpiochip, struct irq_chip *irqchip,
					  unsigned int parent_irq, irq_flow_handler_t parent_handler)
{
	/* Set the parent IRQ for all affected IRQs */
	for (offset = 0; offset < gpiochip->ngpio; offset++) {
		if (!gpiochip_irqchip_irq_valid(gpiochip, offset))
			continue;
		irq_set_parent(irq_find_mapping(gpiochip->irqdomain, offset), parent_irq);
	}
}
int irq_set_parent(int irq, int parent_irq)
{
	unsigned long flags;
	struct irq_desc *desc = irq_get_desc_lock(irq, &flags, 0);

	if (!desc)
		return -EINVAL;

	desc->parent_irq = parent_irq;

	irq_put_desc_unlock(desc, flags);
	return 0;
}

/**
 * irq_find_mapping() - Find a linux irq from an hw irq number.
 * @domain: domain owning this hardware interrupt
 * @hwirq: hardware irq number in that domain space
 */
unsigned int irq_find_mapping(struct irq_domain *domain, irq_hw_number_t hwirq)
{
	if (hwirq < domain->revmap_direct_max_irq) { /* hwirq < 0*/
		data = irq_domain_get_irq_data(domain, hwirq);
		if (data && data->hwirq == hwirq)
			return hwirq;
	}

	/* Check if the hwirq is in the linear revmap. */
	if (hwirq < domain->revmap_size) /* 32 */
		return domain->linear_revmap[hwirq];

	rcu_read_lock();
	data = radix_tree_lookup(&domain->revmap_tree, hwirq);
	rcu_read_unlock();
	return data ? data->irq : 0;

}




irq_create_mapping -> irq_domain_associate




